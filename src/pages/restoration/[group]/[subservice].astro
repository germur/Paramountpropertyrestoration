---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { restorationGroups } from "../../../data/restoration.js";
import { SERVICE_REGISTRY } from "../../../lib/routing";

// Template imports
import UnifiedServiceTemplate from "../../../components/restoration/templates/UnifiedServiceTemplate.astro";
import SEOHead from "../../../components/SEOHead.jsx";

export async function getStaticPaths() {
  const paths = [] as { params: { group: string; subservice: string }, props?: any }[];

  // 1) Collect existing combos from restorationGroups (if any)
  restorationGroups.forEach((group) => {
    group.subservices.forEach((sub) => {
      paths.push({
        params: { group: group.slug, subservice: sub.slug },
        props: {
          groupData: {
            name: group.name,
            slug: group.slug,
            template: group.template || 'unified',
            description: group.description,
          },
          subData: {
            ...sub,
            groupSlug: group.slug,
            groupName: group.name,
            template: group.template,
          },
        },
      });
    });
  });

  // 2) Ensure new required combos exist regardless of external imports
  const ensure = (groupSlug, subSlug, groupName, template, desc) => {
    const exists = paths.some(p => p.params.group === groupSlug && p.params.subservice === subSlug);
    if (!exists) {
      paths.push({
        params: { group: groupSlug, subservice: subSlug },
        props: {
          groupData: { name: groupName, slug: groupSlug, template, description: desc },
          subData: {
            slug: subSlug,
            title: (subSlug || "").split("-").map(w => w ? w.charAt(0).toUpperCase() + w.slice(1) : "").join(" "),
            nombre: (subSlug || "").split("-").map(w => w ? w.charAt(0).toUpperCase() + w.slice(1) : "").join(" "),
            short: desc,
            categoria: 'restoration',
            template,
            groupSlug,
            groupName,
          },
        },
      });
    }
  };

  // Fire
  ensure('fire-damage', 'fire-restoration', 'Fire Damage', 'unified', 'Fire & smoke damage cleanup and repairs.');
  // Storm
  ensure('storm-damage', 'roof-damage', 'Storm Damage', 'unified', 'Hurricane, wind, and storm damage services.');
  // Mold
  ensure('mold-remediation', 'air-quality-testing', 'Mold Remediation', 'unified', 'Mold inspection, cleanup & prevention.');
  // Mitigation
  ensure('mitigation-services', 'emergency-response', 'Mitigation Services', 'unified', 'Rapid mitigation to prevent further damage.');

  return paths;
}

const groupMeta = {
  'water-damage': { name: 'Water Damage', template: 'unified', description: 'Water damage restoration & mitigation.' },
  'fire-damage': { name: 'Fire Damage', template: 'unified', description: 'Fire & smoke damage cleanup and repairs.' },
  'storm-damage': { name: 'Storm Damage', template: 'unified', description: 'Hurricane, wind, and storm damage services.' },
  'mold-remediation': { name: 'Mold Remediation', template: 'unified', description: 'Mold inspection, cleanup & prevention.' },
  'mitigation-services': { name: 'Mitigation Services', template: 'unified', description: 'Rapid mitigation to prevent further damage.' },
};

const params = Astro.params as { group: string; subservice: string };

let { groupData, subData } = Astro.props as any;

if (!groupData || !subData) {
  const gm = groupMeta[params.group] || {
    name: (params.group || "").split("-").map(w => w ? w.charAt(0).toUpperCase() + w.slice(1) : "").join(" "),
    template: 'unified',
    description: ''
  };
  groupData = {
    name: gm.name,
    slug: params.group,
    template: gm.template,
    description: gm.description,
  };
  subData = {
    slug: params.subservice,
    title: (params.subservice || "").split("-").map(w => w ? w.charAt(0).toUpperCase() + w.slice(1) : "").join(" "),
    nombre: (params.subservice || "").split("-").map(w => w ? w.charAt(0).toUpperCase() + w.slice(1) : "").join(" "),
    short: gm.description,
    categoria: 'restoration',
    template: gm.template,
    groupSlug: params.group,
    groupName: gm.name,
  };
}

// Page configuration (hub de subservicio: sin ciudad)
const pageConfig = {
  canonical: `/restoration/${groupData.slug}/${subData.slug}`,
  title:
    subData?.seo?.title ?? `${subData.title} | ${groupData.name} | Paramount Property Restoration`,
  description:
    subData?.seo?.description ?? `Professional ${subData.title} services in Florida by Paramount Property Restoration. 24/7 emergency response, licensed technicians, insurance assistance.`,
};

// All subservices now use the unified template
const SelectedTemplate = UnifiedServiceTemplate;
---

<BaseLayout title={pageConfig.title} description={pageConfig.description}>
  {/* SEO centralizado: canonical, OG/Twitter, JSON-LD */}
  <SEOHead
    title={pageConfig.title}
    description={pageConfig.description}
    siteUrl="https://paramountpropertyrestoration.com"
    vertical="restoration"
    service={groupData.slug}
    subservice={subData.slug}
    city={null}
    addressLocality={null}
    isHub={true}
    businessName="Paramount Property Restoration"
    addressRegion="FL"
    phone={"+1-786-602-2217"}
    slot="head"
  />

  <SelectedTemplate group={groupData} sub={subData} />
</BaseLayout>